package pri.weiqiang.daojapanese;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pri.weiqiang.daojapanese.lesson_title;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON_TITLE".
*/
public class lesson_titleDao extends AbstractDao<lesson_title, Void> {

    public static final String TABLENAME = "LESSON_TITLE";

    /**
     * Properties of entity lesson_title.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Lesson = new Property(0, String.class, "lesson", false, "LESSON");
        public final static Property Lesson_title = new Property(1, String.class, "lesson_title", false, "LESSON_TITLE");
    };


    public lesson_titleDao(DaoConfig config) {
        super(config);
    }
    
    public lesson_titleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON_TITLE\" (" + //
                "\"LESSON\" TEXT," + // 0: lesson
                "\"LESSON_TITLE\" TEXT);"); // 1: lesson_title
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON_TITLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, lesson_title entity) {
        stmt.clearBindings();
 
        String lesson = entity.getLesson();
        if (lesson != null) {
            stmt.bindString(1, lesson);
        }
 
        String lesson_title = entity.getLesson_title();
        if (lesson_title != null) {
            stmt.bindString(2, lesson_title);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public lesson_title readEntity(Cursor cursor, int offset) {
        lesson_title entity = new lesson_title( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // lesson
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // lesson_title
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, lesson_title entity, int offset) {
        entity.setLesson(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLesson_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(lesson_title entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(lesson_title entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
